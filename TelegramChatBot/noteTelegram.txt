yum install -y https://github.com/sudo-project/sudo/releases/download/SUDO_1_9_5p2/sudo-1.9.5-3.el7.x86_64.rpm

https://api.telegram.org/bot1462992536:AAGH0_AJ09IkGpQV0L0gU3YqdfjAnVHVWTk/getMe
https://api.telegram.org/bot1462992536:AAGH0_AJ09IkGpQV0L0gU3YqdfjAnVHVWTk/getUpdates

https://api.telegram.org/bot1462992536:AAGH0_AJ09IkGpQV0L0gU3YqdfjAnVHVWTk/sendMessage?chat_id=996634566&text=hi! have a nice day

https://api.telegram.org/bot1462992536:AAGH0_AJ09IkGpQV0L0gU3YqdfjAnVHVWTk/sendMessage?chat_id=-322186504&text=hi! group


	
https://github.com/python-telegram-bot/python-telegram-bot/tree/master/examples

https://api.telegram.org/bot1428044738:AAGkY8FX3cw6WrnOToL5c0Q8bixhvWoADF8/sendMessage?chat_id=-322186504&text=hi! group
https://api.telegram.org/bot1428044738:AAGkY8FX3cw6WrnOToL5c0Q8bixhvWoADF8/getUpdates
minhnt27
1479164645:AAHmcT6W_c_noexGinNWfTvrMBMsGFTSTPw


https://api.telegram.org/bot1479164645:AAHmcT6W_c_noexGinNWfTvrMBMsGFTSTPw/getMe
===========================================
import requests

def telegram_bot_sendtext(bot_message):
    
    bot_token = '1462992536:AAGH0_AJ09IkGpQV0L0gU3YqdfjAnVHVWTk'
    bot_chatID = '996634566'
    send_text = 'https://api.telegram.org/bot' + bot_token + '/sendMessage?chat_id=' + bot_chatID + '&parse_mode=Markdown&text=' + bot_message

    response = requests.get(send_text)

    return response.json()
    

test = telegram_bot_sendtext("Testing Telegram bot")
print(test)




============================================
#!/usr/bin/env python
# -*- coding: utf-8 -*-
# pylint: disable=W0613, C0116
# type: ignore[union-attr]
# This program is dedicated to the public domain under the CC0 license.

"""
Simple Bot to reply to Telegram messages.
First, a few handler functions are defined. Then, those functions are passed to
the Dispatcher and registered at their respective places.
Then, the bot is started and runs until we press Ctrl-C on the command line.
Usage:
Basic Echobot example, repeats messages.
Press Ctrl-C on the command line or send a signal to the process to stop the
bot.
"""

import logging

from telegram import Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)

logger = logging.getLogger(__name__)


# Define a few command handlers. These usually take the two arguments update and
# context. Error handlers also receive the raised TelegramError object in error.
def start(update: Update, context: CallbackContext) -> None:
    """Send a message when the command /start is issued."""
    update.message.reply_text('Hi!')


def help_command(update: Update, context: CallbackContext) -> None:
    """Send a message when the command /help is issued."""
    update.message.reply_text('Help!')


def echo(update: Update, context: CallbackContext) -> None:
    """Echo the user message."""
    update.message.reply_text(update.message.text)

def who_command(update: Update, context: CallbackContext) -> None:
    """Send a message when the command /start is issued."""
    update.message.reply_text('Im a chat bot of pm TTTM')

def main():
    """Start the bot."""
    # Create the Updater and pass it your bot's token.
    # Make sure to set use_context=True to use the new context based callbacks
    # Post version 12 this will no longer be necessary
    updater = Updater("1462992536:AAGH0_AJ09IkGpQV0L0gU3YqdfjAnVHVWTk", use_context=True)

    # Get the dispatcher to register handlers
    dispatcher = updater.dispatcher

    # on different commands - answer in Telegram
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("help", help_command))
    dispatcher.add_handler(CommandHandler("who", who_command))

    # on noncommand i.e message - echo the message on Telegram
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, echo))

    # Start the Bot
    updater.start_polling()

    # Run the bot until you press Ctrl-C or the process receives SIGINT,
    # SIGTERM or SIGABRT. This should be used most of the time, since
    # start_polling() is non-blocking and will stop the bot gracefully.
    updater.idle()


if __name__ == '__main__':
    main()